#!/usr/bin/python3

import argparse, logging, markdown, os, re, requests, shutil
import subprocess, sys

logging.basicConfig(filename='/tmp/tab2html.log',level=logging.DEBUG)
logging.basicConfig(format='%(asctime)s %(message)s')

parser = argparse.ArgumentParser()
parser.add_argument("-i", "--input", type=str, default="stdin",
                   help="input discourse markdown filename (defaults to stdin)")
parser.add_argument("-o", "--output", type=str, default="stdout",
                   help="output html filename (defaults to stdout)")
parser.add_argument("-s", "--skipimages", type=int, default=0,
                    choices=[0,1],
                    help="do not process images on this run")
parser.add_argument("version", type=str, choices=["2.9","3.0","3.1","3.2"],
                    help="MAAS version number to include")
parser.add_argument("packaging", type=str, choices=["snap","deb"],
                    help="MAAS packaging type to include")
parser.add_argument("view", type=str, choices=["ui","cli"],
                    help="interface type to include")
parser.add_argument("title", type=str,
                    help="title of html document (enclosed in quotes)")
args = parser.parse_args()

logging.info('\n-------------- new run started -----------------')
logging.info('input file: %s', args.input)
logging.info('output file: %s', args.output)

version = "v" + args.version
if args.packaging == "snap":
    packaging = "Snap"
elif args.packaging == "deb":
    packaging = "Packages"
if args.view == "ui":
    view = "view=\"UI\""
elif args.view == "cli":
    view = "view=\"CLI\""

vstring = version + " " + packaging 

logging.info('attempting to read input file')
if args.input == "stdin":
    inbuf = sys.stdin.read()
else:
    try:
        mdfile = open(args.input, "r")
    except:
        logging.warning('could not open input file %s: aborting',
                        args.input)
        print('could not open input file',args.input,': aboring')
        sys.exit(-1)
    inbuf = mdfile.read()
    mdfile.close()

logging.info('successfully read input file')

logging.info('splitting file into blobs')
blobs = re.split('\[[/]*tab[s\] ]*',inbuf)

logging.info('removing irrelevant tab sections')
outbuf = ""
for x in blobs:
    logging.debug('processing blob:\n' + x + "\n")
    if x.startswith("version="):
        logging.debug('  blob starts with \"version=\"')
        if x.find(vstring):
            logging.debug('  blob matches version string ' + vstring)
            if x.find("view=") < 0:
                logging.debug('  blob has no view string')
                outbuf += x.split("]",1)[1]
            elif x.find(view) > 0:
                logging.debug('  blob view string matches ' + view)
                outbuf += x.split("]",1)[1]
            else:
                logging.debug('  blob view string does not match ' + view)
                continue
    else:
        outbuf += x
md = outbuf

logging.info('attempting to create temp image storage dir /tmp/images')
if os.path.isdir("/tmp/images"):
    logging.info('/tmp/images exists: removing')
    try:
        shutil.rmtree("/tmp/images")
    except:
        logging.warn('could not remove existing /tmp/images: aborting')
        print('could not remove existing /tmp/images: aborting')
        sys.exit(-2)
try:
    os.mkdir("/tmp/images")
except:
    logging.warn('could not create /tmp/images: aborting')
    print('could not create /tmp/images: aborting')
    sys.exit(-3)
logging.info('successfully created /tmp/images')

match2 = re.findall(r'<a href="[^>]*><img src="[^ ]*">', md)
imagelines = match2

logging.info('processing images linked in the input file')
for x in imagelines:
    img_url = str(re.findall(r'<img src="([^ ]*)">',x)).split("'")[1]
    img_fnam = "/tmp/images/" + str(img_url).split("/")[-1].split(")")[0].split("'")[0]
    img_link = "images/" + x.split("/")[-1].split(")")[0].split('"')[0]

    if args.skipimages == False:
        logging.info('copying %s to /tmp/images', img_fnam)
        r = requests.get(img_url, stream=True)
        r.raw.decode_content = True
        with open(img_fnam, "wb") as f:
            shutil.copyfileobj(r.raw, f)

        logging.info('conforming %s to doc image dimensions', img_fnam)
        img_props = str(subprocess.check_output(["file", img_fnam]))

        img_awidth = (
            re.search(",[ ]*[0-9]*[]*x[ ]*[0-9]*[ ]*,", img_props)
            .group()
            .split(",")[1]
            .split("x")[0]
        )
        img_aheight = (
            re.search(",[ ]*[0-9]*[]*x[ ]*[0-9]*[ ]*,", img_props)
            .group()
            .split(",")[1]
            .split("x")[1]
        )
        
        corr_width = 690
        corr_height = int(float(img_awidth) / 690.0 * float(img_aheight))
        
        logging.info('adjusting url for %s to local image directory', img_fnam)
        repl_img_line = '<a href="' + img_link
        repl_img_line += '" target = "_blank"><img alt="'
        repl_img_line += "unlabeled image" + '" '
        repl_img_line += 'width="690" '
        repl_img_line += 'src="' + img_link + '">'
            
        logging.info('replacing markdown URL for %s with HTML URL', img_fnam)
        md = md.replace(x, repl_img_line)
        
        logging.info('images downloaded and copied to /tmp/images')

logging.info('attempting to reroute interdocument links')
try:
    md = re.sub(r"https://discourse.maas.io/t", "/t", md)
    md = re.sub(r"/t/([a-z0-9-]*)/([0-9]*)#", r"\1-\2.html#", md)
    md = re.sub(r"/t/([a-z0-9-]*)/([0-9]*)", r"\1-\2.html", md)
    logging.info('interdocument links rerouted to local html targets')
except:
    logging.info('no interdocument links found')

logging.info('temporarily commenting out <detail> sections')
logging.info('  (do not process correctly on markdown conversion)')
md = (
    md.replace("<details>", "zorkD")
    .replace("<summary>", "zorkS")
    .replace("</details>", "zorkDC")
    .replace("</summary>", "zorkSC")
)

logging.info('convert the corrected markdown to html')
extensions = {"extra", "smarty"}
html = markdown.markdown(md, extensions=extensions, output_format="html5")
html = "<h1>" + args.title + "</h1>" + html

logging.info('restoring <detail> sections')
html = (
    html.replace("zorkDC", "</details>")
    .replace("zorkSC", "</summary>")
    .replace("zorkD", "<details>")
    .replace("zorkS", "<summary>")
)

# add an html navigation menu to the file 

print(html)
    

